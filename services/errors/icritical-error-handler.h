#ifndef ICRITICAL_ERROR_HANDLER_H
#define ICRITICAL_ERROR_HANDLER_H

#include <cstdint>

namespace djetk {

/**
 * \brief Critical error handler interface
 *
 * This provides a mechanism to feedback error conditions to the application.
 * In most situations, errors are indicated via return codes. However there are
 * some cases where a return code is not feasible (e.g. constructors). This interface
 * is used during those situations.
 */
class ICriticalErrorHandler {
  public:
    /**
     * \brief Callback function invoked if a critical error is encountered
     * \param[in]   error_code  Error identification code
     * \param[in]   filename    The name of the file from which the error originated
     * \param[in]   line        The line number where this method was invoked in
     */
    virtual void NotifyCriticalError(uint32_t error_code, const char *filename, uint32_t line) = 0;

    // These are the system generated error codes. The application can use values past
    // the \ref app_error value onwards.
    /**
     * \brief Error generated by FreeRTOS allocation function
     */
    static constexpr uint32_t freertos_error                = 1;

    /**
     * \brief Failed to register to some service
     */
    static constexpr uint32_t service_registration_error    = 2;

    /**
     * \brief Errors generated from ISR handlers (generally indicates queue full)
     */
    static constexpr uint32_t isr_handler_error             = 3;

    /**
     * \brief Application defined error code partition
     */
    static constexpr uint32_t app_error         = 0x10000;
};

}   // namespace

#endif

